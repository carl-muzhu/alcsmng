/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.yylc.alcsmng.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.yylc.alcsmng.common.dal.daointerface.AssignInfoDAO;

import com.yylc.alcsmng.common.dal.dataobject.AssignInfoDO;
import java.util.List;
import org.springframework.dao.DataAccessException;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.yylc.alcsmng.common.dal.daointerface.AssignInfoDAO</tt>.
 *
 * This file is generated by <tt>yylc-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>yylc</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/alcs_assign_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>yylc-gen-dal</tt> 
 * to generate this file.
 *
 * @author qiang.wq
 * @version $Id: IbatisAssignInfoDAO.java,v 1.0 2013/10/29 07:34:20 qiang.wq Exp $
 */
public class IbatisAssignInfoDAO extends SqlMapClientDaoSupport implements AssignInfoDAO {
	/**
	 *  Query DB table <tt>alcs_assign_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_assign_info where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return List<AssignInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<AssignInfoDO> queryByUserId(int userId) throws DataAccessException {

        Integer param = new Integer(userId);

        return getSqlMapClientTemplate().queryForList("MS-ASSIGN-INFO-QUERY-BY-USER-ID", param);

    }

	/**
	 *  Insert one <tt>AssignInfoDO</tt> object to DB table <tt>alcs_assign_info</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into alcs_assign_info(id,case_id,user_id,remark,create_time,update_time) values (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)</tt>
	 *
	 *	@param assignInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int saveAssignInfo(AssignInfoDO assignInfo) throws DataAccessException {
    	if (assignInfo == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-ASSIGN-INFO-SAVE-ASSIGN-INFO", assignInfo);

        return assignInfo.getId();
    }

	/**
	 *  Delete records from DB table <tt>alcs_assign_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete alcs_assign_info</tt>
	 *
	 *	@param caseIdList
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteAssignByCaseIdList(List caseIdList) throws DataAccessException {
        Map<String,Object> param = new HashMap<String,Object>();

        param.put("caseIdList", caseIdList);

        return getSqlMapClientTemplate().delete("MS-ASSIGN-INFO-DELETE-ASSIGN-BY-CASE-ID-LIST", param);
    }

	/**
	 *  Query DB table <tt>alcs_assign_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_assign_info</tt>
	 *
	 *	@param offset
	 *	@param limit
	 *	@return List<AssignInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<AssignInfoDO> pageM0ForAdmin(int offset, int limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("offset", new Integer(offset));
        param.put("limit", new Integer(limit));

        return getSqlMapClientTemplate().queryForList("MS-ASSIGN-INFO-PAGE-M-0-FOR-ADMIN", param);

    }

	/**
	 *  Query DB table <tt>alcs_assign_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select count(1) from alcs_assign_info</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int countM0ForAdmin() throws DataAccessException {


	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-ASSIGN-INFO-COUNT-M-0-FOR-ADMIN", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>alcs_assign_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_assign_info</tt>
	 *
	 *	@param userIdList
	 *	@param assignType
	 *	@param offset
	 *	@param limit
	 *	@return List<AssignInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<AssignInfoDO> selectForPage(List userIdList, int assignType, int offset, int limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userIdList", userIdList);
        param.put("assignType", new Integer(assignType));
        param.put("offset", new Integer(offset));
        param.put("limit", new Integer(limit));

        return getSqlMapClientTemplate().queryForList("MS-ASSIGN-INFO-SELECT-FOR-PAGE", param);

    }

	/**
	 *  Query DB table <tt>alcs_assign_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_assign_info</tt>
	 *
	 *	@param userIdList
	 *	@param assignType
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectForPageCount(List userIdList, int assignType) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userIdList", userIdList);
        param.put("assignType", new Integer(assignType));

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-ASSIGN-INFO-SELECT-FOR-PAGE-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

}