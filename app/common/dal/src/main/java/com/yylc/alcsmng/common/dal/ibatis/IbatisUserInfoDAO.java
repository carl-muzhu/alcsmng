/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.yylc.alcsmng.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.yylc.alcsmng.common.dal.daointerface.UserInfoDAO;

import com.yylc.alcsmng.common.dal.dataobject.UserInfoDO;
import org.springframework.dao.DataAccessException;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.yylc.alcsmng.common.dal.daointerface.UserInfoDAO</tt>.
 *
 * This file is generated by <tt>yylc-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>yylc</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/alcs_user_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>yylc-gen-dal</tt> 
 * to generate this file.
 *
 * @author qiang.wq
 * @version $Id: IbatisUserInfoDAO.java,v 1.0 2013/10/29 07:34:20 qiang.wq Exp $
 */
public class IbatisUserInfoDAO extends SqlMapClientDaoSupport implements UserInfoDAO {
	/**
	 *  Insert one <tt>UserInfoDO</tt> object to DB table <tt>alcs_user_info</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into alcs_user_info(user_id,user_id,password,user_name,dept_id,user_type,extension,remark,create_time,update_time) values (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)</tt>
	 *
	 *	@param userInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int saveUserInfo(UserInfoDO userInfo) throws DataAccessException {
    	if (userInfo == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-USER-INFO-SAVE-USER-INFO", userInfo);

        return userInfo.getUserId();
    }

	/**
	 *  Query DB table <tt>alcs_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_user_info where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return UserInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserInfoDO queryUserByUserId(int userId) throws DataAccessException {

        Integer param = new Integer(userId);

        return (UserInfoDO) getSqlMapClientTemplate().queryForObject("MS-USER-INFO-QUERY-USER-BY-USER-ID", param);

    }

	/**
	 *  Query DB table <tt>alcs_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_user_info where (account = ?)</tt>
	 *
	 *	@param account
	 *	@return UserInfoDO
	 *	@throws DataAccessException
	 */	 
    public UserInfoDO queryUserByAccount(String account) throws DataAccessException {

 
        return (UserInfoDO) getSqlMapClientTemplate().queryForObject("MS-USER-INFO-QUERY-USER-BY-ACCOUNT", account);

    }

	/**
	 *  Query DB table <tt>alcs_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_user_info</tt>
	 *
	 *	@param userIdList
	 *	@return List<UserInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserInfoDO> queryUserByUserIdList(List userIdList) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userIdList", userIdList);

        return getSqlMapClientTemplate().queryForList("MS-USER-INFO-QUERY-USER-BY-USER-ID-LIST", param);

    }

	/**
	 *  Query DB table <tt>alcs_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_user_info where (location_code = ?) order by create_time DESC</tt>
	 *
	 *	@param locationCode
	 *	@return List<UserInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserInfoDO> queryUserByLocationCode(int locationCode) throws DataAccessException {

        Integer param = new Integer(locationCode);

        return getSqlMapClientTemplate().queryForList("MS-USER-INFO-QUERY-USER-BY-LOCATION-CODE", param);

    }

	/**
	 *  Query DB table <tt>alcs_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_user_info</tt>
	 *
	 *	@return List<UserInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserInfoDO> queryAllUserInfo() throws DataAccessException {


        return getSqlMapClientTemplate().queryForList("MS-USER-INFO-QUERY-ALL-USER-INFO", null);

    }

	/**
	 *  Query DB table <tt>alcs_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from alcs_user_info</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectForPageCount() throws DataAccessException {


	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-USER-INFO-SELECT-FOR-PAGE-COUNT", null);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>alcs_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_user_info</tt>
	 *
	 *	@param offset
	 *	@param limit
	 *	@return List<UserInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<UserInfoDO> listForPage(int offset, int limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("offset", new Integer(offset));
        param.put("limit", new Integer(limit));

        return getSqlMapClientTemplate().queryForList("MS-USER-INFO-LIST-FOR-PAGE", param);

    }

	/**
	 *  Delete records from DB table <tt>alcs_user_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from alcs_user_info where (user_id = ?)</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserId(int userId) throws DataAccessException {
        Integer param = new Integer(userId);

        return getSqlMapClientTemplate().delete("MS-USER-INFO-DELETE-BY-USER-ID", param);
    }

}