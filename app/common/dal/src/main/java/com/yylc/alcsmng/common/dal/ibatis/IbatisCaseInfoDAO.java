/**
 * yingyinglicai.com Inc.
 * Copyright (c) 2013-2014 All Rights Reserved.
 */
 package com.yylc.alcsmng.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.yylc.alcsmng.common.dal.daointerface.CaseInfoDAO;

import java.util.List;
import com.yylc.alcsmng.common.dal.dataobject.CaseInfoDO;
import org.springframework.dao.DataAccessException;
import java.util.Map;
import java.util.HashMap;

/**
 * An ibatis based implementation of dao interface <tt>com.yylc.alcsmng.common.dal.daointerface.CaseInfoDAO</tt>.
 *
 * This file is generated by <tt>yylc-gen-dal</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>yylc</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/biz/dal/src/conf/dalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/alcs_case_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>yylc-gen-dal</tt> 
 * to generate this file.
 *
 * @author qiang.wq
 * @version $Id: IbatisCaseInfoDAO.java,v 1.0 2013/10/29 07:34:20 qiang.wq Exp $
 */
public class IbatisCaseInfoDAO extends SqlMapClientDaoSupport implements CaseInfoDAO {
	/**
	 *  Query DB table <tt>alcs_case_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_case_info</tt>
	 *
	 *	@param caseIdList
	 *	@param offset
	 *	@param limit
	 *	@return List<CaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<CaseInfoDO> queryByCaseIdList(List caseIdList, int offset, int limit) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("caseIdList", caseIdList);
        param.put("offset", new Integer(offset));
        param.put("limit", new Integer(limit));

        return getSqlMapClientTemplate().queryForList("MS-CASE-INFO-QUERY-BY-CASE-ID-LIST", param);

    }

	/**
	 *  Query DB table <tt>alcs_case_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_case_info</tt>
	 *
	 *	@param userIdList
	 *	@return List<CaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<CaseInfoDO> queryByUserIdList(List userIdList) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("userIdList", userIdList);

        return getSqlMapClientTemplate().queryForList("MS-CASE-INFO-QUERY-BY-USER-ID-LIST", param);

    }

	/**
	 *  Query DB table <tt>alcs_case_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_case_info</tt>
	 *
	 *	@return List<CaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<CaseInfoDO> queryCaseNotClosed() throws DataAccessException {


        return getSqlMapClientTemplate().queryForList("MS-CASE-INFO-QUERY-CASE-NOT-CLOSED", null);

    }

	/**
	 *  Query DB table <tt>alcs_case_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_case_info</tt>
	 *
	 *	@return CaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public CaseInfoDO queryCaseNotAssign() throws DataAccessException {


        return (CaseInfoDO) getSqlMapClientTemplate().queryForObject("MS-CASE-INFO-QUERY-CASE-NOT-ASSIGN", null);

    }

	/**
	 *  Query DB table <tt>alcs_case_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(1) from alcs_case_info</tt>
	 *
	 *	@param caseIdList
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int selectForPageCount(List caseIdList) throws DataAccessException {

	Map<String,Object> param = new HashMap<String,Object>();

        param.put("caseIdList", caseIdList);

	    Integer retObj = (Integer) getSqlMapClientTemplate().queryForObject("MS-CASE-INFO-SELECT-FOR-PAGE-COUNT", param);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.intValue();
		}

    }

	/**
	 *  Query DB table <tt>alcs_case_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_case_info where (case_id = ?)</tt>
	 *
	 *	@param caseId
	 *	@return CaseInfoDO
	 *	@throws DataAccessException
	 */	 
    public CaseInfoDO queryCaseByCaseId(int caseId) throws DataAccessException {

        Integer param = new Integer(caseId);

        return (CaseInfoDO) getSqlMapClientTemplate().queryForObject("MS-CASE-INFO-QUERY-CASE-BY-CASE-ID", param);

    }

	/**
	 *  Update DB table <tt>alcs_case_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update alcs_case_info set current_result=? where (case_id = ?)</tt>
	 *
	 *	@param caseInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateCaseForCurrentResult(CaseInfoDO caseInfo) throws DataAccessException {
    	if (caseInfo == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-CASE-INFO-UPDATE-CASE-FOR-CURRENT-RESULT", caseInfo);
    }

	/**
	 *  Update DB table <tt>alcs_case_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update alcs_case_info set days_overdue=? where (case_id = ?)</tt>
	 *
	 *	@param caseInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateCaseForDaysOverdue(CaseInfoDO caseInfo) throws DataAccessException {
    	if (caseInfo == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return getSqlMapClientTemplate().update("MS-CASE-INFO-UPDATE-CASE-FOR-DAYS-OVERDUE", caseInfo);
    }

	/**
	 *  Query DB table <tt>alcs_case_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from alcs_case_info</tt>
	 *
	 *	@return List<CaseInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<CaseInfoDO> queryCaseForM1() throws DataAccessException {


        return getSqlMapClientTemplate().queryForList("MS-CASE-INFO-QUERY-CASE-FOR-M-1", null);

    }

}